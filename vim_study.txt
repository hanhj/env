第一章：帮助
	%	跳转到匹配的(){}[]处。在编程的时候比较快捷。
	:help key	(h)	显示帮助。如果带key，则显示key的帮助。
	:options	显示选项帮助
	在vim中执行shell命令需要在命令前加上惊叹号
	:!command
	$vimruntime	vim的环境变量/usr/share/vim/vim73
	:scriptnames	显示脚本文件
第三章：移动
	1）关于vim的状态：
		刚进入vim的时候，vim处于普通(normal)状态，此时只能用键盘上的上下左右或特殊键的组合来移动光标。不能编辑文本。
		在normal状态下，键入i,a,o或I,A,O键，vim将进入编辑（edit）状态，此时可以键入字符。在edit状态按ESC键，将退出edit状态，恢复到normal状态。
		在normal状态下，键入:vim将进入命令(command)状态。此时光标位于最下一行，并有提示符:。此时可以输入命令。在命令状态中按ESC键，将退出command状态，恢复到normal状态。
	在以下的描述中如果英文前面有:表示是在命令状态下。比如:number,表示在命令状态下输入number字符。
	如果名词后面带一个括号，则括号中的字符作为前面名词的缩略。比如number(nu),表示可以用nu来代替number。

	2）一般的移动
	在normal状态下
	h	左移
	l	右移
	j	上移
	k	下移
	w	向后移动到下一个单词的首位置
	b	向前移动到前一个单词的首位置
	e	向后移动到下一个单词的尾位置
	ge	向前移动到前一个单词的尾位置
	如果w，b，e是大写字母，W，B，E则认为单词是以,空格)等作为分隔。这样移动将更快。
	以上字母前面都可以加上数字，以代表移动多少数量。
	gg	:跳转到开始
	G	：跳转到结尾

	0	跳转到本行开始
	$	跳转到本行的结束。
	gnumber	跳转到number行
	fc	跳转的找到的c字符处	find character
	ctrl-f	向前翻页	foward
	ctrl-b	向后翻页	backward
	zt	将当前光标所在位置提到屏幕顶行	z想象成一个折叠的纸，t-top
	zb	将当前光标所在位置移到屏幕底行。b-bottom
	zz	将当前光标所在位置移到屏幕中央。
	ctrl-]	将以光标所在处的单词为关键字，跳转到其相关联的地方（称为tag标记）
	ctrl-o或ctrl-t从跳转处返回。
	:number	可以直接跳转到number行
	:set number		(nu)	显示行号
	:set nonumber	(nonu)	不显示行号

	2）用标记跳转：
	m[a-zA-Z]：设置标记，光标移动到想要做标记的地方，然后敲mx。
	`mark：	跳转到标记处,`是键盘左上角的反引号,mark是刚才所做的标记。
	注意用小写字母是在本文档中设置标记，离开本文档该标记就消失。如果用大写字母做标记，则是全局的,可以在多个文件中跳转。
	做标记也可用%，比如在文档的%50处做标记，可以在normal模式下输入50%ms。
	几个特殊标记：
		`表示上次跳转的地方，``就可以在两次跳转之间来回跳了。
		.表示最后修改的地方.
		"表示上次编辑该文件，最后光标停留的地方。
		[表示最后修改开始的位置。
		]表示最后修改结束的位置。
	:marks	显示标记

	4）搜索字符串
	/str 搜索str，如果找到，会将str反显。此时按n将跳转到下一个，shift-n跳转的前一个。
	/str实际上是字符串匹配，可以用正则表达式中的符号。比如精确匹配单词the，而不是somethere。可以用/\<the\>,这里\是转义符，><表示定位在结束还是开头。关于正则表达式可以参见《linux_env_study.txt》和《linux_env.txt》中的相关内容。
	:set ignorecase		(ic)	搜索时忽略大小写，这是默认的。
	:set noignorecase	(noic)	不忽略大小写，即大小写敏感。
	如果不想输入太多的字符，可以将光标定位到某个单词，然后输入*，此时vim会自动提取光标所在处的单词向后进行搜索。输入#，将向前跳转。
	:set incsearch		(is)	可以在输入查找字符串的时候就开始匹配。
	:set noincsearch	(nois)	可以取消上面设置。
	:set wrapscan		(ws)	搜索时回转
	:set nowrapscan		(nows)	取消搜索回转


第四章文本编辑
	a,A	进入编辑模式，并将光标向后移动1位
	i,I	进入编辑模式，光标不移动。
	o	进入编辑模式，在当前行后插入一行。
	O	进入编辑模式，在当前行前插入一行。

	dd	删除一行
	ndd	删除n行
	dw	删除一个单词
	dfc	删除从当前光标到所找到的第一个c字符之间的字符，包括c。
	d$	删除当前到行尾的字符
	x	删除当前光标下的字符。相当于dl	l表示右移
	X	删除当前光标左边的字符。相当于dh	h表示左移
	c	与d类似，但是删除后将进入插入模式
	cl	与dl类似，但是删除后将进入插入模式。快捷键是s
	cc	与dd类似，并进入插入模式。快键键是S
	yy	复制一行	y-yank 拉
	nyy	复制n行
	p	粘贴
	v	进入visual模式
	ctrl-v进入列块的visual模式
	具体以上用法参见《linux_env.txt》
第五章定制vim	
	1）使用vim自带选项。
		vim的选项很多，通过定制可以更方便的使用vim.
	我们可以手动定制vim的一些选项，比如 
	:set(se) number(nu)	显示行号 
	:se list		显示控制字符
	:se filetype	显示当前文件的文件类型。文件类型自动检测：filetype on.文件类型检测是用$vimruntime/filetype.vim中来检测，用:filetype 可以显示当前文件自动检测的情况。
	vi中的选项可以是：
		布尔型变量：可以用:set xx 来打开，:set noxx来关闭。比如：
			:se nu		打开行号显示
			:se nonu	关闭行号显示
		参数型选项：
			:se xx=xxx	设置xx选项为xxx
			:se xx?,或
			:se xx		显示当前值
			:se xx&	恢复xx为默认值
	:se		查看当前的选项情况
	这里不用赘述，具体配置项可以参见options(用:options)

	2）添加一个plugin。
	vim支持插件，以增强vim的功能。（用:scriptnames(scr)可以显示当前装入的脚本文件）
	vim的安装目录一般在 /usr/share/vim/vimxx(xx是当前vim的版本号),这是vim的$vimruntime变量的位置。在此目录下面有:
	macros:		定义了全局配置；
	/ftplugin	定义不同文件类型的插件。
	将macros或ftplugin目录下需要的文件，拷贝到~/.vim/plugin目录下。就可以支持这些插件了。插件的文件名后缀一般是vim
	将上述目录中的相关插件的txt文件拷贝到~/.vim/doc目录下，然后再vim中执行:helptags ~/.vim/doc就可以在帮助文件里支持这些插件了。

	3)关于颜色
		:syntax	enable可以打开语法高亮。
		:colorscheme (colo)	设置配色方案
			配色方案在 /usr/share/vim/vimxx/colors/目录下 

第六章多文件编辑：
	打开多文件:
		方法1:在控制台时,输入多个文件名。
			如：vim a b c
		方法2：在命令模式中输入:edit(e) 文件名。
			:vim e a 读入文件a
			:e!	丢弃当前文件修改，重新读入文件。利用这一点，可以在当当前文件别其他程序修改后，重新读入文件。
		方法3：在命令模式中输入：args 文件名。相当于启动vim 给其多个参数。
		:args a b c
	切换文件：
		:next(n)	切换到下一个文件
		:previous(prev)	切换到前一个文件
		ctrl-^	在当前文件与执行了切换动作的两个文件之间来回切换。

	保存文件：
		:w	:保存当前缓冲区到进入时打开的文件。
		:w filename ：保存当前缓冲区到文件filename中。缓冲区没变，即当前缓冲区针对的还是原来打开的文件，如果修改了没有保存，缓冲区的标志仍然是没有保存。此时在vim状态栏中所指示的文件名依然是原来的文件。
		:saveas (sav) filename:文件改名并保存。将当前缓冲区名改为filename，并保存。
	窗口移动：
		ctrl-w  H	将当前窗口左移
		ctrl-w	J	将当前窗口上移
		ctrl-w	K	将当前窗口下移
		ctrl-w	L	将当前窗口右移

