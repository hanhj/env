第一章 帮助
	:help key	(h)	显示帮助。如果带key，则显示key的帮助。
	:options	显示选项帮助
	在vim中执行shell命令需要在命令前加上惊叹号
	:!command
	$vimruntime	vim的环境变量/usr/share/vim/vim73
	:scriptnames	显示脚本文件
	%	跳转到匹配的(){}[]处。在编程的时候比较快捷。

第三章 移动
	1) 关于vim的状态：
		刚进入vim的时候，vim处于普通(normal)状态，此时只能用键盘上的上下左右或特殊键的组合来移动光标。不能编辑文本。
		在normal状态下，键入i,a,o或I,A,O键，vim将进入编辑（edit) 状态，此时可以键入字符。在edit状态按ESC键，将退出edit状态，恢复到normal状态。
		在normal状态下，键入:vim将进入命令(command)状态。此时光标位于最下一行，并有提示符:。此时可以输入命令。在命令状态中按ESC键，将退出command状态，恢复到normal状态。
		在以下的描述中如果英文单词前面有:表示是在命令状态下。比如:set,表示在命令状态下输入set命令。
 		如果名词后面带一个括号，则括号中的字符作为前面名词的缩略。比如number(nu),表示可以用nu来代替number。
		如果有xx->xxx，表示助记符，将xx理解成xxx。
	2) 一般的移动
		在normal状态下
		h	左移
		l	右移
		j	下移
		k	上移
		w	向后移动到下一个单词的首位置	w->next word
		b	向前移动到前一个单词的首位置	b->back word
		e	向后移动到下一个单词的尾位置	e->end
		ge	向前移动到前一个单词的尾位置	g->go
		如果w，b，e是大写字母，W，B，E则认为单词是以,空格)等作为分隔。这样移动将更快。
		以上字母前面都可以加上数字，以代表移动多少数量。比如：
		3k	表示上移3行。

		gg	:跳转到开始
		G	：跳转到结尾
		xgg	:跳转到x行
		xG	:跳到x行
		0	:跳转到本行开始
		$	:跳转到本行的结束。
		fx	:跳转到字符x处,x是任意字符	f->find
		ctrl-f	向前翻页	f->foward
		ctrl-b	向后翻页	b->backward
		zt	将当前光标所在位置提到屏幕顶行	z想象成一个折叠的纸，t->top
		zb	将当前光标所在位置移到屏幕底行。b->bottom
		zz	将当前光标所在位置移到屏幕中央。
		ctrl-]	将以光标所在处的单词为关键字，跳转到其相关联的地方（称为tag标记) 
		ctrl-o或ctrl-t从跳转处返回。
		:xx	直接跳转到xx行
		:set number(nu)		显示行号
		:set nonumber(nonu)	不显示行号
	3) 用标记跳转：
		m[a-zA-Z]：设置标记，光标移动到想要做标记的地方，然后敲mx。
		`mark：	跳转到标记处,`是键盘左上角的反引号,mark是刚才所做的标记。
		注意用小写字母是在本文档中设置标记，离开本文档该标记就消失。如果用大写字母做标记，则是全局的,可以在多个文件中跳转。
		做标记也可用%，比如在文档的%50处做标记，可以在normal模式下输入50%ms。
		几个特殊标记：
		 	`表示上次跳转的地方，``就可以在两次跳转之间来回跳了。
			.表示最后修改的地方.
			"表示上次编辑该文件，最后光标停留的地方。
			[表示最后修改开始的位置。
			]表示最后修改结束的位置。
		:marks	显示标记
	4) 搜索字符串
		/str 搜索str，如果找到，会将str反显。此时按n将跳转到下一个，shift-n跳转的前一个。
		/str实际上是字符串匹配，可以用正则表达式中的符号。比如精确匹配单词the，而不是somethere。可以用/\<the\>,这里\是转义符，><表示定位在结束还是开头。关于正则表达式可以参见《linux_env_study.txt》和《linux_env.txt》中的相关内容。
		:set ignorecase		(ic)	搜索时忽略大小写，这是默认的。
		:set noignorecase	(noic)	不忽略大小写，即大小写敏感。
		如果不想输入太多的字符，可以将光标定位到某个单词，然后输入*，此时vim会自动提取光标所在处的单词向后进行搜索。输入#，将向前跳转。
		:set incsearch		(is)	可以在输入查找字符串的时候就开始匹配。
		:set noincsearch	(nois)	可以取消上面设置。
		:set wrapscan		(ws)	搜索时回转
		:set nowrapscan		(nows)	取消搜索回转
第四章 文本编辑
	1) 基本命令
		a,A	进入编辑模式，并将光标向后移动1位
		i,I	进入编辑模式，光标不移动。
		o	进入编辑模式，在当前行后插入一行。
		O	进入编辑模式，在当前行前插入一行。
		dd	删除一行
		ndd	删除n行
		dw	删除一个单词
		dfc	删除从当前光标到所找到的第一个c字符之间的字符，包括c。
		d$	删除当前到行尾的字符
		x	删除当前光标下的字符。相当于dl	l表示右移
		X	删除当前光标左边的字符。相当于dh	h表示左移
		c	与d类似，但是删除后将进入插入模式
		cl	与dl类似，但是删除后将进入插入模式。快捷键是s
		cc	与dd类似，并进入插入模式。快键键是S
		yy	复制一行	y-yank 拉
		nyy	复制n行
		p	粘贴
		v	进入visual模式
		ctrl-v进入列块的visual模式
		具体以上用法参见《linux_env.txt》
第五章 定制vim	
	1) 使用vim自带选项。
		vim的选项很多，通过定制可以更方便的使用vim.
		我们可以手动定制vim的一些选项，比如 
		:set(se) number(nu)	显示行号 
		:se list		显示控制字符
		:se filetype	显示当前文件的文件类型。文件类型自动检测：filetype on.文件类型检测是用$vimruntime/filetype.vim中来检测，用:filetype 可以显示当前文件自动检测的情况。
		vi中的选项可以是：
			布尔型变量：可以用:set xx 来打开，:set noxx来关闭。比如：
				:se nu		打开行号显示
				:se nonu	关闭行号显示
			参数型选项：
				:se xx=xxx	设置xx选项为xxx
				:se xx?,或
				:se xx		显示当前值
				:se xx&	恢复xx为默认值
		:se		查看当前的选项情况
		这里不用赘述，具体配置项可以参见options(用:options)
		.	在vim中会记录所敲入的任何命令，在normal状态下，键入.可以执行最后一次所执行的命令。
	2) 添加一个plugin。
		vim支持插件，以增强vim的功能。（用:scriptnames(scr)可以显示当前装入的脚本文件) 
		vim的安装目录一般在 /usr/share/vim/vimxx(xx是当前vim的版本号),这是vim的$vimruntime变量的位置。在此目录下面有:
		macros:		定义了全局配置；
		/ftplugin	定义不同文件类型的插件。
		将macros或ftplugin目录下需要的文件，拷贝到~/.vim/plugin目录下。就可以支持这些插件了。插件的文件名后缀一般是vim
		将上述目录中的相关插件的txt文件拷贝到~/.vim/doc目录下，然后再vim中执行:helptags ~/.vim/doc就可以在帮助文件里支持这些插件了。
	3) 关于颜色
		:syntax	enable可以打开语法高亮。
		:colorscheme (colo)	设置配色方案
			配色方案在 /usr/share/vim/vimxx/colors/目录下 
第六章 多文件编辑：
	1) 打开多文件:
		方法1:在控制台时,输入多个文件名。
			如：vim a b c
		方法2：在命令模式中输入:edit(e) 文件名。
			:vim e a 读入文件a
			:e!	丢弃当前文件修改，重新读入文件。利用这一点，可以在当当前文件别其他程序修改后，重新读入文件。
		方法3：在命令模式中输入：args 文件名。相当于启动vim 给其多个参数。
		:args a b c
	2) 切换文件：
		:next(n)	切换到下一个文件
		:previous(prev)	切换到前一个文件
		ctrl-^	在当前文件与执行了切换动作的两个文件之间来回切换。
	3) 保存文件：
		:w	:保存当前缓冲区到进入时打开的文件。
		:w filename ：保存当前缓冲区到文件filename中。缓冲区没变，即当前缓冲区针对的还是原来打开的文件，如果修改了没有保存，缓冲区的标志仍然是没有保存。此时在vim状态栏中所指示的文件名依然是原来的文件。
		:saveas (sav) filename:文件改名并保存。将当前缓冲区名改为filename，并保存。
		% 代表当前编辑的文件。
	4) 窗口移动：
		ctrl-w  H	到当前窗口左边
		ctrl-w	J	到当前窗口上边
		ctrl-w	K	到当前窗口下边
		ctrl-w	L	到当前窗口右边
		:files	在状态栏中显示当前编辑的文件
	5) 全部：
		:wall(wa)	保存所有文件
		:qall(qa)	退出所有窗口
	6) 比较两个文件

第七章 分隔窗口
	1) 基本命令
		:split(sp)[file]	水平建立一个窗口。如果不带file，则将当前文件分隔成水平两个部分。如果带file，则在新窗口打开文件file
		:vsplit(vsp)[file] 垂直分隔
		:new[file]	水平开一个新窗口，并建立一个新文件缓冲区。
		:vnew[file]	垂直开一个新窗口，并建立一个新文件缓冲区。
		:close(clo)	关闭当前窗口
		:only(on)	关闭除当前窗口的其他窗口。

第二十八章 折行
	对于一个结构化文本，可能由多章构成，每章有多段，每段有多节。
	对于一个源程序文档，可能由不同的缩进表示代码的层次。
	通过折行，可以将同一章，段，节或层次的内容折叠起来，就像将一张纸折叠起来一样，在折叠处显示折叠起来的内容的首行内容，这样更容易看清文档的结构。
	折行的操作都是在normal状态下执行。
	1) 手动折行
		手动折行就是手动定义折行的内容。
		zfap ：折行定义。
			z可以理解为折叠，f-flag，zf表示定义折叠，ap表示以下文本内容。
			在vim（或其他很多文本处理程序）中将没有分行的文本作为一段连续的文本，作为一段，即使在屏幕上我们看到两段之间是分行的。比如：
			aaa
			bbb
			上面的内容我们看到的是两行，但是实际上vim将aaa，bbb解释成一段，只有两行之间空一行，才认为是两段。如：
			aaa 
		
			bbb
		zc	:z close 折叠起来
		zo	：z open 折行打开，在折行的地方按空格也可以打开折行。
		zr	:减少折叠层次，折叠打开。与zo所不同的是对全文有效，而zo仅仅是对光标所在的折叠处有效。
		zm	:增加折叠层次，折叠起来。是zr的反命令，与zc不同的地方与zr命令一样。
		zR	：全文展开。与zr命令所不同的是，zr每次仅减少一层的折叠层次，如果有比此层更深的层次则不展开，而zR为尽可能的展开更多的层次，即将所有折叠的地方都展开。
		zM	：全文折叠。与zm命令所不同的是，zm每次仅增加一层的折叠层次，此层的上一层并不折叠，而zM则尽可能的折叠更多的层次，即将所有能够折叠的地方都折叠起来，这时可以比较清楚的看到文档的大纲。
		相关命令：
		:set foldmethod[=xx]	设置折叠方法，xx可以是manual，indent，marker，expr。
			manual是手动设置折行标记，用zf命令，在其他方式下zf命令无效。
			indent是根据缩进设置折行标记。自动进行。
			marker是根据文本中的{{{[x]来设置折行标记，x是表示折行深度的数字（1,2,3..).如果不带数字在折行结束的地方需要写上}}}，如果带数字则vim会自动认为前面的折行结束。这种方法的缺点是在文本中需要手动加上折行标记。
			expr是通过编辑的一个表达式来计算折行标记。用:set foldexpr=xxx来设置。比较麻烦，就不写了。
			比较常用的是manual和indent方式。
		:set foldlevel	设置折叠深度。
		set foldlevel=0表示尽可能折叠。zr，zm,zR,zM命令实际上是改变foldlevel数字来实现的。数字越大，表示需要折叠层次越高，即只有达到这个层次的地方才折叠，也就是展开。数字越小，表示需要折叠的层次越低，即只要达到这个层次的地方就折叠，也就是折叠。所以zR命令会在全文查找折叠层次，取最大值作为foldlevel。zM命令将foldlevel设置成0。
	2) 自动折行
		:se foldmethod=index 或marker，expr 
		:se foldlevel=0.可以根据情况来设置。如果在编辑的时候折行乱了，可以用此命令，重新折行。
	3) 折行状态保存
		:mkview(mkvie) x x是需要保存的视图状态数字，可以保存10个视图状态。
		:loadview(lo) x 装入视图。







